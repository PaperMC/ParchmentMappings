CLASS net/minecraft/server/level/DistanceManager
	METHOD <init> (Lnet/minecraft/world/level/TicketStorage;Ljava/util/concurrent/Executor;Ljava/util/concurrent/Executor;)V
		ARG 1 ticketStorage
		ARG 2 dispatcher
		ARG 3 mainThreadExecutor
	METHOD addPlayer (Lnet/minecraft/core/SectionPos;Lnet/minecraft/server/level/ServerPlayer;)V
		ARG 1 sectionPos
		ARG 2 player
	METHOD forEachEntityTickingChunk (Lit/unimi/dsi/fastutil/longs/LongConsumer;)V
		ARG 1 action
	METHOD getChunk (J)Lnet/minecraft/server/level/ChunkHolder;
		ARG 1 chunkPos
	METHOD getChunkLevel (JZ)I
		ARG 1 chunkPos
		ARG 3 simulate
	METHOD getNaturalSpawnChunkCount ()I
		COMMENT Returns the number of chunks taken into account when calculating the mob cap
	METHOD hasPlayersNearby (J)Lnet/minecraft/util/TriState;
		ARG 1 chunkPos
	METHOD inBlockTickingRange (J)Z
		ARG 1 chunkPos
	METHOD inEntityTickingRange (J)Z
		ARG 1 chunkPos
	METHOD isChunkToRemove (J)Z
		ARG 1 chunkPos
	METHOD removePlayer (Lnet/minecraft/core/SectionPos;Lnet/minecraft/server/level/ServerPlayer;)V
		ARG 1 sectionPos
		ARG 2 player
	METHOD runAllUpdates (Lnet/minecraft/server/level/ChunkMap;)Z
		ARG 1 chunkMap
	METHOD updateChunkScheduling (JILnet/minecraft/server/level/ChunkHolder;I)Lnet/minecraft/server/level/ChunkHolder;
		ARG 1 chunkPos
		ARG 3 newLevel
		ARG 4 holder
		ARG 5 oldLevel
	METHOD updatePlayerTickets (I)V
		ARG 1 viewDistance
	METHOD updateSimulationDistance (I)V
		ARG 1 simulationDistance
	CLASS PlayerTicketTracker
		METHOD haveTicketFor (I)Z
			ARG 1 level
		METHOD onLevelChange (JIZZ)V
			ARG 1 chunkPos
			ARG 3 level
			ARG 4 hadTicket
			ARG 5 hasTicket
		METHOD updateViewDistance (I)V
			ARG 1 viewDistance
	CLASS FixedPlayerDistanceChunkTracker
		FIELD chunks Lit/unimi/dsi/fastutil/longs/Long2ByteMap;
			COMMENT Chunks that are at most {@link #maxDistance} chunks away from the closest player.
		METHOD <init> (Lnet/minecraft/server/level/DistanceManager;I)V
			ARG 2 maxDistance
		METHOD havePlayer (J)Z
			ARG 1 chunkPos
		METHOD onLevelChange (JII)V
			COMMENT Called after {@link #setLevel(long, int)} puts/removes chunk into/from {@link #chunks}.
			ARG 1 chunkPos
			ARG 3 oldLevel
				COMMENT Previous level of the chunk if it was smaller than {@link #maxDistance}, {@code maxDistance + 2} otherwise.
			ARG 4 newLevel
